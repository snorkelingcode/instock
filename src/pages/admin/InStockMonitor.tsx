
import React, { useState } from "react";
import Layout from "@/components/layout/Layout";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { useToast } from "@/hooks/use-toast";
import MonitoringItem, { MonitoringItemProps } from "@/components/admin/MonitoringItem";
import AddMonitorForm from "@/components/admin/AddMonitorForm";
import { AlertTriangle, RefreshCw, Search } from "lucide-react";

// This is just mock data for UI development purposes
// In a real implementation, this would come from the database
const mockMonitorItems: MonitoringItemProps[] = [
  {
    id: "1",
    url: "https://www.pokemoncenter.com/product/290-85252/pokemon-tcg-scarlet-violet-burning-steel-booster-box",
    name: "Burning Steel Booster Box",
    lastChecked: new Date().toISOString(),
    status: "out-of-stock",
    targetText: "Add to Cart",
    isActive: true,
  },
  {
    id: "2",
    url: "https://www.pokemoncenter.com/product/290-85287/pokemon-tcg-scarlet-violet-burning-steel-elite-trainer-box",
    name: "Burning Steel ETB",
    lastChecked: new Date(Date.now() - 3600000).toISOString(),
    status: "in-stock",
    isActive: true,
  },
  {
    id: "3",
    url: "https://www.pokemoncenter.com/product/290-98010/pokemon-tcg-scarlet-violet-temporal-forces-build-battle-stadium",
    name: "Temporal Forces Build & Battle",
    lastChecked: new Date(Date.now() - 7200000).toISOString(),
    status: "error",
    targetText: "Out of Stock",
    isActive: false,
  },
];

const InStockMonitor: React.FC = () => {
  const [monitors, setMonitors] = useState<MonitoringItemProps[]>(mockMonitorItems);
  const [searchQuery, setSearchQuery] = useState("");
  const { toast } = useToast();
  const [isRefreshing, setIsRefreshing] = useState(false);

  // Filter monitors based on search query
  const filteredMonitors = monitors.filter(
    (monitor) =>
      monitor.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      monitor.url.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // Active and inactive monitors
  const activeMonitors = filteredMonitors.filter((m) => m.isActive);
  const inactiveMonitors = filteredMonitors.filter((m) => !m.isActive);

  const handleAddMonitor = (values: { name: string; url: string; targetText?: string }) => {
    const newMonitor: MonitoringItemProps = {
      id: Date.now().toString(), // This would be generated by the database in a real app
      url: values.url,
      name: values.name,
      status: "unknown",
      targetText: values.targetText,
      isActive: true,
      lastChecked: new Date().toISOString(),
    };

    setMonitors([newMonitor, ...monitors]);
    toast({
      title: "Monitor Added",
      description: `Now monitoring ${values.name}`,
    });
  };

  const handleToggleActive = (id: string) => {
    setMonitors(
      monitors.map((monitor) =>
        monitor.id === id ? { ...monitor, isActive: !monitor.isActive } : monitor
      )
    );
    
    const monitor = monitors.find(m => m.id === id);
    toast({
      title: monitor?.isActive ? "Monitoring Paused" : "Monitoring Resumed",
      description: `${monitor?.name} is now ${monitor?.isActive ? "paused" : "being monitored"}`,
    });
  };

  const handleDelete = (id: string) => {
    const monitor = monitors.find(m => m.id === id);
    setMonitors(monitors.filter((monitor) => monitor.id !== id));
    toast({
      title: "Monitor Removed",
      description: `${monitor?.name} has been removed from monitoring`,
    });
  };

  const handleRefresh = (id: string) => {
    const monitor = monitors.find(m => m.id === id);
    toast({
      title: "Checking Availability",
      description: `Checking ${monitor?.name}...`,
    });
    
    // This would trigger an API call to check the URL in a real implementation
    // For now, just update the lastChecked timestamp
    setMonitors(
      monitors.map((monitor) =>
        monitor.id === id ? { ...monitor, lastChecked: new Date().toISOString() } : monitor
      )
    );
  };

  const handleRefreshAll = () => {
    setIsRefreshing(true);
    
    // Simulate a refresh of all active monitors
    setTimeout(() => {
      setMonitors(
        monitors.map((monitor) =>
          monitor.isActive 
            ? { ...monitor, lastChecked: new Date().toISOString() } 
            : monitor
        )
      );
      setIsRefreshing(false);
      toast({
        title: "All Monitors Refreshed",
        description: `Checked ${activeMonitors.length} active monitors`,
      });
    }, 1500);
  };

  return (
    <Layout>
      <div className="max-w-6xl mx-auto my-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-2">In-Stock Monitor</h1>
          <p className="text-gray-600">
            Track product availability across multiple websites
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Add new monitor form */}
          <div className="md:col-span-1">
            <AddMonitorForm onSubmit={handleAddMonitor} />
          </div>

          {/* Monitors list */}
          <div className="md:col-span-2">
            <div className="bg-white rounded-lg border shadow-sm p-4">
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold">Monitoring Items</h2>
                <div className="flex items-center gap-2">
                  <div className="relative">
                    <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500" />
                    <Input
                      type="text"
                      placeholder="Search monitors..."
                      className="pl-8 w-[200px]"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                    />
                  </div>
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={handleRefreshAll}
                    disabled={isRefreshing || activeMonitors.length === 0}
                  >
                    <RefreshCw size={16} className={`mr-1 ${isRefreshing ? 'animate-spin' : ''}`} />
                    {isRefreshing ? "Refreshing..." : "Refresh All"}
                  </Button>
                </div>
              </div>

              <Tabs defaultValue="active" className="w-full">
                <TabsList className="mb-4">
                  <TabsTrigger value="active">
                    Active ({activeMonitors.length})
                  </TabsTrigger>
                  <TabsTrigger value="inactive">
                    Paused ({inactiveMonitors.length})
                  </TabsTrigger>
                  <TabsTrigger value="all">
                    All ({filteredMonitors.length})
                  </TabsTrigger>
                </TabsList>

                <TabsContent value="active" className="space-y-4">
                  {activeMonitors.length > 0 ? (
                    activeMonitors.map((monitor) => (
                      <MonitoringItem
                        key={monitor.id}
                        {...monitor}
                        onToggleActive={handleToggleActive}
                        onDelete={handleDelete}
                        onRefresh={handleRefresh}
                      />
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      <AlertTriangle className="mx-auto h-12 w-12 text-gray-400 mb-2" />
                      <p>No active monitors found</p>
                      {searchQuery && (
                        <p className="text-sm mt-2">
                          Try adjusting your search or add a new monitor
                        </p>
                      )}
                    </div>
                  )}
                </TabsContent>

                <TabsContent value="inactive" className="space-y-4">
                  {inactiveMonitors.length > 0 ? (
                    inactiveMonitors.map((monitor) => (
                      <MonitoringItem
                        key={monitor.id}
                        {...monitor}
                        onToggleActive={handleToggleActive}
                        onDelete={handleDelete}
                        onRefresh={handleRefresh}
                      />
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      <p>No paused monitors found</p>
                    </div>
                  )}
                </TabsContent>

                <TabsContent value="all" className="space-y-4">
                  {filteredMonitors.length > 0 ? (
                    filteredMonitors.map((monitor) => (
                      <MonitoringItem
                        key={monitor.id}
                        {...monitor}
                        onToggleActive={handleToggleActive}
                        onDelete={handleDelete}
                        onRefresh={handleRefresh}
                      />
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      <p>No monitors found</p>
                      {searchQuery && (
                        <p className="text-sm mt-2">Try adjusting your search</p>
                      )}
                    </div>
                  )}
                </TabsContent>
              </Tabs>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default InStockMonitor;
